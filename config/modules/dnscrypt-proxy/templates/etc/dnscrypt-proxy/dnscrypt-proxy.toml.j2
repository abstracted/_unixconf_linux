##################################
# Network
##################################

## List of local addresses and ports to listen to.
listen_addresses = [
  '127.0.0.1:{{ dnscrypt.port }}',
  '[::1]:{{ dnscrypt.port }}',
]

## Restrictions
force_tcp = false
block_ipv6 = false

## Fallback resolver
fallback_resolver = '9.9.9.9:53'

## Never let dnscrypt-proxy try to use the system DNS settings;
## unconditionally use the fallback resolver.
ignore_system_dns = true

## Maximum time (in seconds) to wait for network connectivity before
## initializing the proxy.
netprobe_timeout = 60

## Address and port to try initializing a connection to to check if the network is up.
netprobe_address = '9.9.9.9:53'

##################################
# Security
##################################

## DNSCrypt: Create a new, unique key for every single DNS query
## This may improve privacy but can also have a significant impact on CPU usage
## Only enable if you don't have a lot of network load
dnscrypt_ephemeral_keys = false

## DoH: Disable TLS session tickets - increases privacy but also latency
tls_disable_session_tickets = false

##################################
# Performance
##################################

max_clients = 250
timeout = 2500
keepalive = 30
cert_refresh_delay = 240

##################################
# Cache
##################################

cache = false
cache_size = 512
cache_min_ttl = 600
cache_max_ttl = 86400
cache_neg_min_ttl = 60
cache_neg_max_ttl = 600

##################################
# Log
##################################

log_files_max_size = 10
log_files_max_age = 7
log_files_max_backups = 1
log_level = 2
log_file = 'dnscrypt-proxy.log'
use_syslog = true


##################################
# Server Settings
##################################
{% if dnscrypt.servers is defined and
      dnscrypt.servers | length > 0 
%}

### Manual
# If "server_names" are defined, all other "sources/auto server" settings will be ignored.

server_names = [
{% for server in dnscrypt.servers %}
  '{{ server.name }}',
{% endfor %}
]

{% else %}

### Auto
# Settings defined here will be used to pick a server from the "sources" section.

ipv4_servers = true
ipv6_servers = false
dnscrypt_servers = true
doh_servers = false
require_dnssec = true
require_nolog = true
require_nofilter = true

### Disabled server rules.
# Server names to avoid even if they match all criteria

disabled_server_names = []

{% endif %}

##################################
# Host Mapping
##################################

## Forwarding rules.
# Example map entries (one entry per line):
# example.com 9.9.9.9
# example.net 9.9.9.9,8.8.8.8,1.1.1.1
forwarding_rules = 'forwarding-rules.txt'

## Cloaking rules.
# Cloaking returns a predefined address for a specific name.
# In addition to acting as a HOSTS file, it can also return the IP address
# of a different name. It will also do CNAME flattening.
#
# Example map entries (one entry per line)
# example.com     10.1.1.1
# www.google.com  forcesafesearch.google.com
cloaking_rules = 'cloaking-rules.txt'

##################################
# Anonymized DNS
##################################

[anonymized_dns]

routes = [
{% for server in dnscrypt.servers %}
{% if server.relays | length > 0 %}
    { server_name='{{ server.name }}', via=[ '{{ server.relays | join("', '") }}' ] },
{% endif %}
{% endfor %}
]

skip_incompatible = true

##########################################
# Logging
##########################################

[query_log]
  ## Path to the query log file (absolute, or relative to the same directory as the executable file)
  ## Can be /dev/stdout to log to the standard output (and set log_files_max_size to 0)
  # file = 'query.log'

  ## Query log format (currently supported: tsv and ltsv)
  format = 'tsv'

  ## Do not log these query types, to reduce verbosity. Keep empty to log everything.
  # ignored_qtypes = ['DNSKEY', 'NS']

## Log queries for nonexistent zones
## These queries can reveal the presence of malware, broken/obsolete applications,
## and devices signaling their presence to 3rd parties.
[nx_log]
  ## Path to the query log file (absolute, or relative to the same directory as the executable file)
  # file = 'nx.log'

  ## Query log format (currently supported: tsv and ltsv)
  format = 'tsv'

##########################################
# Blacklist
##########################################

[blacklist]
  ## Path to the file of blocking rules (absolute, or relative to the same directory as the executable file)
  blacklist_file = 'blacklist.txt'

  ## Optional path to a file logging blocked queries
  log_file = 'blocked.log'

  ## Optional log format: tsv or ltsv (default: tsv)
  log_format = 'tsv'


[ip_blacklist]
  ## Path to the file of blocking rules (absolute, or relative to the same directory as the executable file)
  blacklist_file = 'ip-blacklist.txt'

  ## Optional path to a file logging blocked queries
  log_file = 'ip-blocked.log'

  ## Optional log format: tsv or ltsv (default: tsv)
  log_format = 'tsv'

##########################################
# Whitelist
##########################################

[whitelist]
  ## Path to the file of whitelisting rules (absolute, or relative to the same directory as the executable file)
  whitelist_file = 'whitelist.txt'

  ## Optional path to a file logging whitelisted queries
  log_file = 'whitelisted.log'

  ## Optional log format: tsv or ltsv (default: tsv)
  log_format = 'tsv'

##########################################
# Time access restrictions
##########################################

## One or more weekly schedules can be defined here.
## Patterns in the name-based blocklist can optionally be followed with @schedule_name
## to apply the pattern 'schedule_name' only when it matches a time range of that schedule.
##
## For example, the following rule in a blacklist file:
## *.youtube.* @time-to-sleep
## would block access to YouTube only during the days, and period of the days
## define by the 'time-to-sleep' schedule.
##
## {after='21:00', before= '7:00'} matches 0:00-7:00 and 21:00-0:00
## {after= '9:00', before='18:00'} matches 9:00-18:00

[schedules]
  [schedules.'focus']
  mon = [{after='8:00', before='12:00'}, {after='13:00', before='22:00'}, {after='23:00', before="7:00"}]
  tue = [{after='8:00', before='12:00'}, {after='13:00', before='22:00'}, {after='23:00', before="7:00"}]
  wed = [{after='8:00', before='12:00'}, {after='13:00', before='22:00'}, {after='23:00', before="7:00"}]
  thu = [{after='8:00', before='12:00'}, {after='13:00', before='22:00'}, {after='23:00', before="7:00"}]
  fri = [{after='8:00', before='12:00'}, {after='13:00', before='22:00'}, {after='23:00', before="7:00"}]
  sat = [{after='8:00', before='12:00'}, {after='13:00', before='22:00'}, {after='23:00', before="7:00"}]
  sun = [{after='8:00', before='12:00'}, {after='13:00', before='22:00'}, {after='23:00', before="7:00"}]

#########################
# Sources
#########################

[sources]
  ## Remote source from https://github.com/DNSCrypt/dnscrypt-resolvers
  [sources.'public-resolvers']
  urls = ['https://raw.githubusercontent.com/DNSCrypt/dnscrypt-resolvers/master/v2/public-resolvers.md', 'https://download.dnscrypt.info/resolvers-list/v2/public-resolvers.md']
  cache_file = 'public-resolvers.md'
  minisign_key = 'RWQf6LRCGA9i53mlYecO4IzT51TGPpvWucNSCh1CBM0QTaLn73Y7GFO3'
  format = 'v2'
  refresh_delay = 72
  prefix = ''

  ## Anonymized DNS relays
  [sources.'relays']
  urls = ['https://raw.githubusercontent.com/DNSCrypt/dnscrypt-resolvers/master/v2/relays.md', 'https://download.dnscrypt.info/resolvers-list/v2/relays.md']
  cache_file = 'relays.md'
  minisign_key = 'RWQf6LRCGA9i53mlYecO4IzT51TGPpvWucNSCh1CBM0QTaLn73Y7GFO3'
  refresh_delay = 72
  prefix = ''
